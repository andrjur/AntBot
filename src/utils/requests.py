import json  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
from sqlalchemy import select, update, delete, func
from sqlalchemy.ext.asyncio import AsyncSession
from .models import User, Course, UserCourse, Homework
import logging
from src.utils.courses import verify_code  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from sqlalchemy.exc import SQLAlchemyError
from .session import AsyncSessionFactory
from typing import List, Optional  # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤


async def get_pending_homeworks(session: AsyncSession) -> List[Homework]:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (–∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–∞)"""
    try:
        result = await session.execute(
            select(Homework)
            .join(User, Homework.user_id == User.user_id)
            .where(Homework.status == 'pending')
            .order_by(Homework.submission_time)
        )
        return result.scalars().all()
    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç: {e}")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∫–∞–∫ –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

async def add_user(session: AsyncSession, user_id: int, name: str, course_id: str = None) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫—É—Ä—Å—É"""
    try:
        user = User(user_id=user_id, name=name)
        session.add(user)
        
        if course_id:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—É—Ä—Å - –¥–æ–±–∞–≤–ª—è–µ–º –∏ –µ–≥–æ
            version_id = "self_check"  # –ò–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—É—Ä—Å–∞
            await enroll_user_in_course(session, user_id, course_id, version_id)
            
        await session.commit()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await session.rollback()
        return False



async def get_user(session: AsyncSession, user_id: int) -> Optional[User]:
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–≤–µ—Ä—Å–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤-–æ–ª–∏–º–ø–∏–π—Ü–µ–≤)"""
    result = await session.execute(select(User).where(User.user_id == user_id))
    return result.scalar_one_or_none()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

async def enroll_user_in_course(session: AsyncSession, user_id: int, course_id: str, version_id: str) -> bool:
    try:
        user_course = UserCourse(
            user_id=user_id,
            course_id=course_id,
            version_id=version_id,
            current_lesson=1
        )
        session.add(user_course)
        await session.commit()
        return True
    except Exception as e:
        logging.error(f"Error enrolling user {user_id} in course {course_id}: {e}")
        await session.rollback()
        return False

async def submit_homework(session: AsyncSession, user_id: int, 
                         course_id: str, lesson: int, file_id: str) -> bool:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ —É–∂–µ –î–ó
        existing = await session.execute(
            select(Homework).where(
                Homework.user_id == user_id,
                Homework.course_id == course_id,
                Homework.lesson == lesson
            )
        )
        if existing.scalar():
            return False  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –î–ó
        homework = Homework(
            user_id=user_id,
            course_id=course_id,
            lesson=lesson,
            status='pending',
            file_id=file_id,
            submission_time=func.now()
        )
        session.add(homework)
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins(course_id, user_id, lesson)
        return True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –î–ó: {e}")
        await session.rollback()
        return False


async def get_user_info(session: AsyncSession, user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫—É—Ä—Å–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        stmt = select(
            User.name,
            UserCourse.course_id,
            UserCourse.current_lesson,
            UserCourse.version_id,
            UserCourse.first_lesson_time
        ).join(
            UserCourse, User.user_id == UserCourse.user_id, isouter=True
        ).where(User.user_id == user_id)
        
        result = await session.execute(stmt)
        user_data = result.first()
        
        if not user_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
        name, course_id, lesson, version_id, first_lesson = user_data
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫—É—Ä—Å–∞
        if not course_id:
            return f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞
        first_lesson_formatted = first_lesson.strftime("%d.%m.%Y") if first_lesson else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        course = await session.execute(select(Course.name).where(Course.id == course_id))
        course_name = course.scalar() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        return (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
            f"üéì –ö—É—Ä—Å: {course_name}\n"
            f"üìö –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {lesson}\n"
            f"üóì –ù–∞—á–∞–ª–æ –∫—É—Ä—Å–∞: {first_lesson_formatted}\n"
            f"üîë –¢–∞—Ä–∏—Ñ: {version_id}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"


async def verify_course_code(code: str, user_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥ –∏–∑ courses.json"""
    try:
        with open('c:/Trae/AntBot/data/courses.json', 'r', encoding='utf-8') as f:
            courses = json.load(f)
        
        # –ò—â–µ–º –∫–æ–¥ –≤–æ –≤—Å–µ—Ö –∫—É—Ä—Å–∞—Ö
        for course_id, course_data in courses.items():
            for version in course_data.get('versions', []):
                if version.get('code', '').lower() == code.lower():
                    async with AsyncSessionFactory() as session:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫—É—Ä—Å
                        stmt = select(UserCourse).where(
                            UserCourse.user_id == user_id,
                            UserCourse.course_id == course_id
                        )
                        if await session.scalar(stmt):
                            return False, "–≠—Ç–æ—Ç –∫—É—Ä—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∫—É—Ä—Å
                        if await enroll_user_in_course(session, user_id, course_id, version['id']):
                            return True, f"–ö—É—Ä—Å '{course_data['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                        return False, "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—Å–∞"
        
        return False, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ"
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        return False, "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"


async def set_user_state(session: AsyncSession, user_id: int, state: str) -> bool:
    """Update user's state in database"""
    try:
        stmt = update(User).where(User.user_id == user_id).values(state=state)
        await session.execute(stmt)
        await session.commit()
        return True
    except Exception as e:
        logging.error(f"Error updating state for user {user_id}: {e}")
        await session.rollback()
        return False


# Add these imports if not already present
from sqlalchemy import select
from .models import User, UserCourse

async def get_user_info(user_id: int):
    """Get user info from database"""
    async with AsyncSessionFactory() as session:
        result = await session.execute(
            select(User)
            .where(User.user_id == user_id)
        )
        return result.scalar_one_or_none()


async def get_user_state(user_id: int) -> tuple:
    """Get current user state from database"""
    async with AsyncSessionFactory() as session:
        result = await session.execute(
            select(UserState)
            .where(UserState.user_id == user_id)
        )
        state = result.scalar_one_or_none()
        if state:
            return (state.state, state.course_id, state.lesson)
        return None


# –î–æ–±–∞–≤–ª—è–µ–º –≥–¥–µ-–Ω–∏–±—É–¥—å –≤ –Ω–∞—á–∞–ª–µ
get_user_db = get_user  # –ü—Ä–æ—Å—Ç–æ –∞–ª–∏–∞—Å
from functools import wraps
from sqlalchemy.exc import SQLAlchemyError

def safe_db_operation(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            async with AsyncSessionFactory() as session:
                kwargs['session'] = session
                result = await func(*args, **kwargs)
                await session.commit()
                return result
        except SQLAlchemyError as e:
            logging.error(f"Database error in {func.__name__}: {e}")
            if 'session' in locals():
                await session.rollback()
            return None
    return wrapper

