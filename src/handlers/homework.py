from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
import logging
import os
import pytz
import random
from datetime import datetime
import glob
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.utils.db import (
    safe_db_operation, submit_homework, get_user_state, 
    set_user_state, get_next_lesson, get_admin_ids
)
from src.config import get_lesson_delay, extract_delay_from_filename
from src.keyboards.admin import get_hw_review_kb, get_rejection_reasons_kb
from src.keyboards.markup import create_main_menu

router = Router()
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º FSM –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–∞
class RejectHomeworkStates(StatesGroup):
    waiting_for_comment = State()

@router.message(F.photo | F.document)
async def handle_homework(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = await get_user_state(message.from_user.id)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {state}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        if not state or state[1] != 'waiting_homework':
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª - –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∏ —É—Ä–æ–∫–µ
        course_id = state[0]
        current_lesson = state[2]
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.photo:
            file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
            file_type = 'photo'
        elif message.document:
            file_id = message.document.file_id
            file_type = 'document'
        else:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        hw_id = await submit_homework(
            user_id=message.from_user.id,
            course_id=course_id,
            lesson=current_lesson,
            file_id=file_id,
            bot=bot  # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        )
        
        if hw_id:
            await message.reply("‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.")
            
            # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await set_user_state(
                user_id=message.from_user.id,
                course_id=course_id,
                state='waiting_approval',
                lesson=current_lesson
            )
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admin_ids = await get_admin_ids()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            admin_message = (
                f"üìù –ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {message.from_user.id})\n"
                f"üìö –ö—É—Ä—Å: {course_id}\n"
                f"üìñ –£—Ä–æ–∫: {current_lesson}\n"
                f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {hw_id}"
            )
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    if file_type == 'photo':
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                        sent_message = await bot.send_photo(
                            chat_id=admin_id,
                            photo=file_id,
                            caption=admin_message
                        )
                    else:
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
                        sent_message = await bot.send_document(
                            chat_id=admin_id,
                            document=file_id,
                            caption=admin_message
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    await bot.send_message(
                        chat_id=admin_id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_hw_review_kb(message.from_user.id, course_id, current_lesson)
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", 
                reply_markup=create_main_menu(course_id)
            )
            
        else:
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("hw_approve_"))
async def approve_homework(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: hw_approve_USER_ID_COURSE_ID_LESSON)
        parts = callback.data.split('_')
        if len(parts) < 5:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        user_id = int(parts[2])
        course_id = parts[3]
        lesson = int(parts[4])
        
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ–¥–æ–±—Ä—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫—É—Ä—Å—É {course_id}, —É—Ä–æ–∫ {lesson}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
        next_lesson = lesson + 1
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
        delay = get_lesson_delay()
        result = await safe_db_operation(
            'SELECT datetime(?, "+" || ? || " seconds")',
            (current_time.strftime('%Y-%m-%d %H:%M:%S'), str(delay))
        )
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å fetchone –¥–ª—è —Å–ø–∏—Å–∫–∞
        if result and len(result) > 0:
            next_time = result[0]
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞")
            return
            
        next_lesson_time = next_time[0]
        logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {next_lesson_time}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        base_path = os.path.join(project_root, 'data', 'courses', course_id, f'lesson{next_lesson}')
        
        if not os.path.exists(base_path):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Ä–æ–∫–∞ {next_lesson} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {base_path}")
            await callback.answer(f"‚ö†Ô∏è –£—Ä–æ–∫ {next_lesson} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
        else:
            # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
            lesson_files = glob.glob(os.path.join(base_path, '*.*'))
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(lesson_files)} —Ñ–∞–π–ª–æ–≤ –≤ —É—Ä–æ–∫–µ {next_lesson}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤
            for file_path in lesson_files:
                file_name = os.path.basename(file_path)
                delay = extract_delay_from_filename(file_name)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏
                await safe_db_operation(
                    '''
                    INSERT INTO scheduled_files 
                    (user_id, course_id, lesson, file_name, send_at)
                    VALUES (?, ?, ?, ?, datetime(?, "+" || ? || " seconds"))
                    ''',
                    (user_id, course_id, next_lesson, file_name, 
                     current_time.strftime('%Y-%m-%d %H:%M:%S'), str(delay))
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await safe_db_operation(
            '''
            UPDATE homeworks
            SET status = 'approved', 
                approval_time = ?,
                next_lesson_at = ?,
                admin_id = ?
            WHERE user_id = ? AND course_id = ? AND lesson = ? AND status = 'pending'
            ''',
            (current_time.strftime('%Y-%m-%d %H:%M:%S'), 
             next_lesson_time, callback.from_user.id, 
             user_id, course_id, lesson)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await safe_db_operation(
            '''
            UPDATE user_courses
            SET current_lesson = ?
            WHERE user_id = ? AND course_id = ?
            ''',
            (next_lesson, user_id, course_id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É {lesson} –æ–¥–æ–±—Ä–µ–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {next_lesson_time}."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_user_state(
            user_id=user_id,
            course_id=course_id,
            state='waiting_lesson',
            lesson=next_lesson
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫—É—Ä—Å—É {course_id}, —É—Ä–æ–∫ {lesson} –æ–¥–æ–±—Ä–µ–Ω–æ!\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ {next_lesson} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {next_lesson_time}.",
            reply_markup=None
        )
        
        await callback.answer("‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")


@router.callback_query(F.data.startswith("hw_reject_"))
async def reject_homework_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: hw_reject_USER_ID_COURSE_ID_LESSON)
        parts = callback.data.split('_')
        if len(parts) < 5:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        user_id = int(parts[2])
        course_id = parts[3]
        lesson = int(parts[4])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data(
            reject_user_id=user_id,
            reject_course_id=course_id,
            reject_lesson=lesson
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ—Ç–∫–∞–∑–∞
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
            reply_markup=get_rejection_reasons_kb()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.set_state(RejectHomeworkStates.waiting_for_comment)
        
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(RejectHomeworkStates.waiting_for_comment, F.data.startswith("reject_reason_"))
async def process_rejection_reason(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
        reason_key = callback.data.replace("reject_reason_", "")
        
        # –°–ª–æ–≤–∞—Ä—å —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        reasons = {
            "shy": {
                "text": "–û–π, –∑–∞—Å–º—É—â–∞–ª–∞! üò≥ –Ø –Ω–µ –º–æ–≥—É —Ç–∞–∫–æ–µ –ø—Ä–∏–Ω—è—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —Å–∫—Ä–æ–º–Ω–æ.",
                "image": "rejection_shy.jpg"
            },
            "communism": {
                "text": "–¢–æ–≤–∞—Ä–∏—â! –¢–∞–∫–∏–º–∏ —Ç–µ–º–ø–∞–º–∏ –∫–æ–º–º—É–Ω–∏–∑–º –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏—à—å! üö© –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ª—É—á—à–µ!",
                "image": "rejection_communism.jpg"
            },
            "focus": {
                "text": "–ê –Ω—É-–∫–∞ –≤–∑—è–ª–∞... —Å–µ–±—è –≤ —Ä—É–∫–∏! üí™ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.",
                "image": "rejection_focus.jpg"
            },
            "random": {
                "text": None,  # –ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞
                "image": None  # –ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        user_id = data.get("reject_user_id")
        course_id = data.get("reject_course_id")
        lesson = data.get("reject_lesson")
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
        comment_text = reasons.get(reason_key, {}).get("text")
        if reason_key == "random" or not comment_text:
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
            phrases_path = os.path.join(
                os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
                "data", "rejection_phrases.txt"
            )
            
            try:
                with open(phrases_path, "r", encoding="utf-8") as f:
                    phrases = f.readlines()
                    comment_text = random.choice([p.strip() for p in phrases if p.strip()])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ—Ä–∞–∑ –æ—Ç–∫–∞–∑–∞: {e}")
                comment_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        await reject_homework_with_comment(
            user_id=user_id,
            course_id=course_id,
            lesson=lesson,
            admin_id=callback.from_user.id,
            comment=comment_text,
            image_key=reasons.get(reason_key, {}).get("image"),
            callback=callback,
            bot=bot
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(RejectHomeworkStates.waiting_for_comment)
async def process_custom_rejection_comment(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        user_id = data.get("reject_user_id")
        course_id = data.get("reject_course_id")
        lesson = data.get("reject_lesson")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment = message.text
        
        if not comment:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É.")
            return
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        await reject_homework_with_comment(
            user_id=user_id,
            course_id=course_id,
            lesson=lesson,
            admin_id=message.from_user.id,
            comment=comment,
            image_key=None,  # –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            callback=None,
            message=message,
            bot=bot
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        await state.clear()


async def reject_homework_with_comment(user_id, course_id, lesson, admin_id, comment, image_key=None, 
                                      callback=None, message=None, bot=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        await safe_db_operation(
            '''
            UPDATE homeworks
            SET status = 'rejected', 
                approval_time = ?,
                admin_id = ?,
                admin_comment = ?
            WHERE user_id = ? AND course_id = ? AND lesson = ? AND status = 'pending'
            ''',
            (current_time.strftime('%Y-%m-%d %H:%M:%S'), 
             admin_id, comment, user_id, course_id, lesson)
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = f"‚ùå –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É {lesson} —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        user_message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
        user_message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        if image_key:
            # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –æ—Ç–∫–∞–∑–æ–≤
            images_dir = os.path.join(
                os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
                "data", "images", "rejections"
            )
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
            if image_key == "random":
                try:
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if not os.path.exists(images_dir):
                        os.makedirs(images_dir)
                        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ—Ç–∫–∞–∑–æ–≤: {images_dir}")
                    
                    images = [f for f in os.listdir(images_dir) 
                             if os.path.isfile(os.path.join(images_dir, f)) 
                             and f.lower().endswith(('.png', '.jpg', '.jpeg'))]
                    if images:
                        image_key = random.choice(images)
                    else:
                        image_key = None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
                    image_key = None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é
            if image_key:
                image_path = os.path.join(images_dir, image_key)
                if os.path.exists(image_path):
                    photo = FSInputFile(image_path)
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=user_message
                    )
                else:
                    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(
                        chat_id=user_id,
                        text=user_message
                    )
            else:
                # –ï—Å–ª–∏ –∫–ª—é—á –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await bot.send_message(
                    chat_id=user_id,
                    text=user_message
                )
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=user_id,
                text=user_message
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_user_state(
            user_id=user_id,
            course_id=course_id,
            state='waiting_homework',
            lesson=lesson
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=user_id,
            text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=create_main_menu(course_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å callback
        if callback and callback.message:
            await callback.message.edit_text(
                f"‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫—É—Ä—Å—É {course_id}, —É—Ä–æ–∫ {lesson} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}",
                reply_markup=None
            )
            await callback.answer("‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å message
        if message:
            await message.reply(
                f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∫—É—Ä—Å—É {course_id}, —É—Ä–æ–∫ {lesson} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {e}", exc_info=True)
        if callback:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        if message:
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data.startswith("view_homeworks_"))
async def view_other_homeworks(callback: CallbackQuery, bot: Bot):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: view_homeworks_COURSE_ID_LESSON)
        parts = callback.data.split('_')
        if len(parts) < 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        course_id = parts[2]
        lesson = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ —É—Ä–æ–∫–∞
        result = await safe_db_operation(
            '''
            SELECT h.user_id, h.file_id, u.name
            FROM homeworks h
            JOIN users u ON h.user_id = u.user_id
            WHERE h.course_id = ? AND h.lesson = ? AND h.status = 'approved'
            ORDER BY h.approval_time DESC
            LIMIT 10
            ''',
            (course_id, lesson)
        )
        
        if not result or len(result) == 0:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            return
            
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await callback.message.answer(
            f"üìö –ü—Ä–∏–º–µ—Ä—ã –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –∫—É—Ä—Å—É {course_id}, —É—Ä–æ–∫ {lesson}:\n"
            f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(result)} –∑–∞–¥–∞–Ω–∏–π"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        for hw in result:
            user_id, file_id, user_name = hw
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                await bot.send_photo(
                    chat_id=callback.from_user.id,
                    photo=file_id,
                    caption=f"üë§ –ê–≤—Ç–æ—Ä: {user_name}\nüìñ –£—Ä–æ–∫: {lesson}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è {file_id}: {e}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–∞–∫ —Ñ–æ—Ç–æ
                try:
                    await bot.send_document(
                        chat_id=callback.from_user.id,
                        document=file_id,
                        caption=f"üë§ –ê–≤—Ç–æ—Ä: {user_name}\nüìñ –£—Ä–æ–∫: {lesson}"
                    )
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_id}: {e2}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=create_main_menu(course_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π")