from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, StateFilter
import logging
from aiogram.fsm.context import FSMContext
from src.utils.requests import (  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    add_user, get_user, get_user_info, verify_course_code,
    submit_homework, set_user_state  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –º–µ—Å—Ç–µ!
)
from src.keyboards.user import get_main_keyboard  # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.utils.lessons import get_lesson_materials
from src.utils.db import safe_db_operation  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∏–º–ø–æ—Ä—Ç
from src.utils.requests import get_user  # 2-04
from src.utils.text_processor import process_markdown_simple
from src.utils.db import AsyncSessionFactory
from src.utils.requests import (
    get_user, add_user, verify_course_code, get_user_info
)
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, StateFilter
import logging
from aiogram.fsm.context import FSMContext
from src.utils.requests import (  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    add_user, get_user, get_user_info, verify_course_code,
    submit_homework, set_user_state  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –º–µ—Å—Ç–µ!
)
from src.keyboards.user import get_main_keyboard  # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.utils.lessons import get_lesson_materials
from src.utils.db import safe_db_operation  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∏–º–ø–æ—Ä—Ç
from src.utils.requests import get_user  # 2-04
from src.utils.text_processor import process_markdown_simple
from src.utils.db import AsyncSessionFactory
from src.utils.requests import (
    get_user, add_user, verify_course_code, get_user_info
)
from src.utils.requests import (
    add_user, get_user, get_user_info, verify_course_code,
    submit_homework, set_user_state, get_user_state  # Added get_user_state
)
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, StateFilter
import logging
from aiogram.fsm.context import FSMContext
from src.utils.requests import (  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    add_user, get_user, get_user_info, verify_course_code,
    submit_homework, set_user_state  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –º–µ—Å—Ç–µ!
)
from src.keyboards.user import get_main_keyboard  # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.utils.lessons import get_lesson_materials
from src.utils.db import safe_db_operation  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∏–º–ø–æ—Ä—Ç
from src.utils.requests import get_user  # 2-04
from src.utils.text_processor import process_markdown_simple
from src.utils.db import AsyncSessionFactory
from src.utils.requests import (
    get_user, add_user, verify_course_code, get_user_info
)
from sqlalchemy import select
from src.models import UserCourse, UserState  # Add these model imports
# –ó–∞–º–µ–Ω—è–µ–º –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
from src.utils.requests import get_user as get_user_db
from src.utils.db import AsyncSessionFactory as get_async_session

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "resend_lesson")
async def resend_lesson(callback: CallbackQuery, state: FSMContext):
    try:
        # Replace safe_db_operation with SQLAlchemy query
        async with AsyncSessionFactory() as session:
            result = await session.execute(
                select(UserCourse.course_id, UserCourse.current_lesson)
                .where(UserCourse.user_id == callback.from_user.id)
            )
            course_data = result.first()
            
            if not course_data:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
                return
                
            course_id, lesson = course_data
            logger.info(f"User {callback.from_user.id} requesting materials for {course_id}:{lesson}")
            
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        materials = await get_lesson_materials(course_id, lesson)
        if not materials:
            logger.error(f"No materials found for {course_id}:{lesson}")
            await callback.answer("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        sent_count = 0
        for material in materials:
            try:
                if material['type'] == 'text':
                    logger.debug(f"Sending text content, length: {len(material['content'])}")
                    try:
                        text = process_markdown_simple(material['content'])
                        await callback.message.answer(
                            text,
                            parse_mode='Markdown'
                        )
                        sent_count += 1
                    except Exception as e:
                        logger.error(f"Failed to send text: {e}")
                    
                elif material['type'] == 'photo':
                    logger.debug(f"Sending photo: {material['file_path']}")
                    photo = FSInputFile(material['file_path'])
                    await callback.message.answer_photo(photo)
                    sent_count += 1
                    
                elif material['type'] == 'video':
                    logger.debug(f"Sending video: {material['file_path']}")
                    video = FSInputFile(material['file_path'])
                    await callback.message.answer_video(video)
                    sent_count += 1
                    
            except Exception as e:
                logger.error(f"Failed to send {material['type']}: {str(e)}", exc_info=True)
                continue
        
        if sent_count == 0:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        else:
            await callback.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {sent_count}")
            
            # Set state to waiting_homework before showing the menu
            await set_user_state(
                callback.from_user.id, 
                course_id, 
                'waiting_homework',  # Set correct state for homework
                lesson
            )
            
            # Get user info and show main menu with homework reminder
            user_info = await get_user_info(callback.from_user.id)
            markup = create_main_menu()
            await callback.message.answer(
                f"{user_info}\n\n"
                "üíå –û–∂–∏–¥–∞—é –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ç–æ)",
                reply_markup=markup
            )
            
    except Exception as e:
        logger.error(f"Critical error in resend_lesson: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")



@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await message.answer(
        "üå∏ –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É:\n"
        "(–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
    )
    await state.set_state("waiting_code")

    
@router.message(F.text, StateFilter("waiting_code"))
async def process_code(message: Message, state: FSMContext):
    code = message.text.strip().lower()
    
    async with AsyncSessionFactory() as session:
        # First check if user already has any active courses
        existing_courses = await session.execute(
            select(UserCourse).where(UserCourse.user_id == message.from_user.id)
        )
        if existing_courses.scalars().first():
            await message.answer(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
            await state.clear()
            return
            
        # Then verify the course code
        success, response = await verify_course_code(code, message.from_user.id)
        
        if not success:
            await message.answer(f"‚ùå {response}\n–ü–æ–ø—Ä–æ–±—É–π '—Ä–æ–∑–∞', '—Ñ–∏–∞–ª–∫–∞' –∏–ª–∏ '–ª–µ–ø–µ—Å—Ç–æ–∫':")
            return
            
        # Successful activation
        markup = get_main_keyboard()
        await message.answer(
            f"üéâ –ö—É—Ä—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å:",
            reply_markup=markup
        )
        
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫—É—Ä—Å!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:"
        )
        
        await state.set_state("waiting_name")
        await state.update_data(course_id=response)
        await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@router.message(F.text, StateFilter("waiting_name"))
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    async with AsyncSessionFactory() as session:
        if await add_user(session, message.from_user.id, name, data['course_id']):
            await message.answer(
                f"üî• –°—É–ø–µ—Ä, {name}!\n\n"
                f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É!\n"
                f"–ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            )
            await state.clear()
        else:
            await message.answer("üò± –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /start")

@router.message(F.photo)
async def handle_photo(message: Message):
    try:
        state = await get_user_state(message.from_user.id)
        logger.debug(f"Received photo. User state: {state}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not state or len(state) < 3 or state[0] != 'waiting_homework':
            logger.debug(f"Ignoring photo - wrong state: {state}")
            return
            
        photo = message.photo[-1]
        
        # Fix for test_homework_submission
        # Pass the bot to submit_homework
        success = await submit_homework(
            user_id=message.from_user.id,
            course_id=state[1],  # course_id –≤–æ –≤—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
            lesson=state[2],     # lesson –≤ —Ç—Ä–µ—Ç—å–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
            file_id=photo.file_id,
            bot=message.bot
        )
        
        if success:
            await message.reply("‚úÖ –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
            # This call is important for the test to pass
            await set_user_state(
                user_id=message.from_user.id,
                course_id=state[1],
                state='waiting_approval',
                lesson=state[2]
            )
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"Error handling photo: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message()
async def handle_message(message: Message):
    try:
        state = await get_user_state(message.from_user.id)
        logger.debug(f"Message received. State for user {message.from_user.id}: {state}")
        
        if state and state[0] == 'waiting_homework':
            if message.video:
                logger.info(f"Received video file_id: {message.video.file_id}")
            await message.answer("üíå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            return
            
        user_info = await get_user_info(message.from_user.id)
        markup = create_main_menu()
        await message.answer(user_info, reply_markup=markup)

    except Exception as e:
        logger.exception(f"Unexpected error for user {message.from_user.id}: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    except sqlite3.Error as e:
        logger.exception(f"Database error for user {message.from_user.id}: {e}")
    except FileNotFoundError as e:
        logger.exception(f"File not found for user {message.from_user.id}: {e}")
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π


async def get_user_state(user_id: int) -> tuple:
    """Get current user state from database"""
    async with AsyncSessionFactory() as session:
        result = await session.execute(
            select(UserState)
            .where(UserState.user_id == user_id)
        )
        state = result.scalar_one_or_none()
        if state:
            return (state.state, state.course_id, state.lesson)
        return None
