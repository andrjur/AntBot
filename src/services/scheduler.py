from datetime import datetime, timedelta
import logging
from aiogram import Bot
from ..utils.session import AsyncSessionFactory
from ..models import ScheduledFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler

logger = logging.getLogger(__name__)

# Initialize scheduler
scheduler = AsyncIOScheduler()
bot = None  # Will be set during initialization

def init_scheduler(bot_instance: Bot):
    global bot
    bot = bot_instance
    scheduler.start()

async def schedule_lessons():
    """Schedule lessons for users"""
    logger.info("Scheduling lessons...")
    # Implementation here


async def schedule_next_lesson(user_id: int, course_id: str, lesson_num: int):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–∫
        if not await lesson_exists(course_id, lesson_num):
            await bot.send_message(
                user_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ç–æ—Ç –∫—É—Ä—Å!"
            )
            return
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        delay = await get_course_delay(course_id)  # –ë–µ—Ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É—Ä—Å–∞
        send_time = datetime.now() + timedelta(hours=delay)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
        async with AsyncSessionFactory() as session:
            scheduled = ScheduledFile(
                user_id=user_id,
                course_id=course_id,
                lesson_num=lesson_num,
                send_time=send_time,
                status="pending"
            )
            session.add(scheduled)
            await session.commit()
            
        # –°—Ç–∞–≤–∏–º –≤ —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(
            send_lesson,
            'date',
            run_date=send_time,
            args=[user_id, course_id, lesson_num],
            id=f"lesson_{user_id}_{course_id}_{lesson_num}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
        await bot.send_message(
            user_id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def send_lesson(user_id: int, course_id: str, lesson_num: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        lesson_data = await get_lesson_data(course_id, lesson_num)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if lesson_data.text:
            await bot.send_message(user_id, lesson_data.text)
        
        if lesson_data.photo:
            await bot.send_photo(user_id, FSInputFile(lesson_data.photo))
            
        if lesson_data.document:
            await bot.send_document(user_id, FSInputFile(lesson_data.document))
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        async with AsyncSessionFactory() as session:
            await update_user_progress(session, user_id, course_id, lesson_num)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞ {lesson_num} –¥–ª—è {user_id}: {e}")
        await bot.send_message(
            user_id, 
            "üìõ –£–ø—Å, —É—Ä–æ–∫ –∑–∞—Å—Ç—Ä—è–ª –≤ –ø—É—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        )