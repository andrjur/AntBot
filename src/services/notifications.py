async def notify_admins(course_id: str, user_id: int, lesson: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins = await get_admins()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user = await get_user(user_id)
        course = await get_course(course_id)
        
        text = (
            f"üì¨ –ù–æ–≤–æ–µ –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {user.name}\n"
            f"üéì –ö—É—Ä—Å: {course.name}\n"
            f"üìö –£—Ä–æ–∫: {lesson}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
        for admin in admins:
            try:
                await bot.send_message(
                    admin.user_id,
                    text,
                    reply_markup=get_hw_review_kb(user_id, course_id, lesson)
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin.user_id}: {e}")
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")