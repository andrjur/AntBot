import pytest
from src.handlers.user import start_handler, process_registration, process_activation, handle_photo
# Change from:
# from src.utils.db import get_user_info
# To:
from src.utils.requests import get_user_info
from aiogram.types import Message, User
from aiogram.fsm.context import FSMContext
from unittest.mock import AsyncMock, patch, MagicMock
from aiogram.types import Message
from conftest import db_session  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É

@pytest.mark.asyncio
async def test_registration_flow(db_session):  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å–µ—Å—Å–∏—é
    message = AsyncMock(spec=Message)
    message.text = "–¢–µ—Å—Ç–æ–≤—ã–π –¢–µ—Å—Ç–æ–≤–∏—á"
    message.from_user = AsyncMock(id=123)
    message.answer = AsyncMock()
    
    state = AsyncMock(FSMContext)
    
    mock_user_data = (123, "–¢–µ—Å—Ç–æ–≤—ã–π –¢–µ—Å—Ç–æ–≤–∏—á", "2024-01-01", 0)
    
    # –ú–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å –ø–∞—Ç—á–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç üó∫Ô∏è
    with patch('src.handlers.user.add_user', new=AsyncMock(return_value=True)) as mock_add_user, \
         patch('tests.test_user_flow.get_user', new=AsyncMock(return_value=mock_user_data)) as mock_get_user:
        
        await process_registration(message, state)
        
        mock_add_user.assert_awaited_once_with(123, "–¢–µ—Å—Ç–æ–≤—ã–π –¢–µ—Å—Ç–æ–≤–∏—á")
        
        # –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–æ–∫–∞ ü•ü
        user = await get_user(123)
        assert user == mock_user_data
        assert user[1] == "–¢–µ—Å—Ç–æ–≤—ã–π –¢–µ—Å—Ç–æ–≤–∏—á"
    
    state.clear.assert_called_once()

@pytest.mark.asyncio
async def test_course_activation():
    message = AsyncMock(spec=Message)
    message.from_user = AsyncMock(id=12345)  # <-- –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º from_user
    message.text = "—Ä–æ–∑–∞"
    message.answer = AsyncMock()
    
    state = AsyncMock(FSMContext)
    
    with patch('src.handlers.user.verify_course_code', 
              new=AsyncMock(return_value=(1, "–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å"))), \
         patch('src.handlers.user.safe_db_operation', new=AsyncMock()):
        
        await process_activation(message, state)
        message.answer.assert_awaited_once()

@pytest.mark.asyncio
async def test_homework_submission(mock_message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–º–∞—à–∫–∏ üìö"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    mock_message.photo = [MagicMock(file_id="test_photo")]
    mock_message.document = None
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–∞—Ç—á–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    import src.handlers.homework
    
    # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with patch('src.utils.db.get_user_state', return_value=('course1', 'waiting_homework', 1)), \
         patch('src.utils.db.submit_homework', return_value=1), \
         patch('src.utils.db.set_user_state') as mock_set_state, \
         patch('src.utils.db.get_admin_ids', return_value=[1, 2]), \
         patch('src.keyboards.markup.create_main_menu') as mock_create_menu:
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await src.handlers.homework.handle_homework(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        mock_message.reply.assert_called_once()
        assert "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É" in mock_message.reply.call_args[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        mock_set_state.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        mock_message.answer.assert_called_once()


@pytest.mark.asyncio
async def test_handle_message_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ handle_message üêõ"""
    message = AsyncMock(spec=Message)
    message.from_user = AsyncMock(id=999)
    message.answer = AsyncMock()
    
    # –ú–æ–∫–∞–µ–º get_user_state —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with patch('src.handlers.user.get_user_state', 
              new=AsyncMock(side_effect=Exception("Test error"))):
        
        await handle_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ë–∂–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        message.answer.assert_called_with(
            "üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


# –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω–æ–µ:
# from src.utils.requests import get_user_info  # –≠—Ç–æ—Ç –±–µ–≥–ª–µ—Ü –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from src.handlers.user import (
    start_handler, 
    process_registration,
    process_activation,
    handle_photo,
    handle_message  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–±—ã—Ç–æ–≥–æ —ë–∂–∏–∫–∞ ü¶î
)