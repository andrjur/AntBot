import pytest
from unittest.mock import AsyncMock, patch
from aiogram.types import Message
from src.handlers.course import handle_start

@pytest.mark.asyncio
async def test_handle_start(message_mock):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start üöÄ"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è get_user_info
    mock_user_info = AsyncMock()
    mock_user_info.return_value = {
        'name': '–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
        'course_id': 'python101',
        'current_lesson': 1
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è safe_db_operation
    mock_db = AsyncMock()
    mock_db.return_value = []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è scheduled_files
    
    with patch('src.handlers.course.get_user_info', new=mock_user_info), \
         patch('src.utils.scheduler.safe_db_operation', return_value=mock_db):
        
        await handle_start(message_mock)
        message_mock.answer.assert_called_with("–ü—Ä–∏–≤–µ—Ç, –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á! üëã")

@pytest.mark.asyncio
async def test_handle_course_start(message_mock, bot):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∫—É—Ä—Å–∞ üìö"""
    message_mock.bot = bot
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è get_user_info
    mock_user_info = AsyncMock()
    mock_user_info.return_value = {
        'name': '–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
        'course_id': 'python101',
        'current_lesson': 1,
        'status': 'active'
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è safe_db_operation
    mock_db = AsyncMock()
    mock_db.return_value = []
    
    with patch('src.handlers.course.get_user_info', new=mock_user_info), \
         patch('src.utils.scheduler.safe_db_operation', return_value=mock_db), \
         patch('src.keyboards.user.get_main_keyboard', return_value=None):  # –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Ç—å –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        
        await handle_start(message_mock)
        message_mock.answer.assert_called_once()