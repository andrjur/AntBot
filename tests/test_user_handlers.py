import pytest
from unittest.mock import AsyncMock, patch
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from src.handlers.user import (
    start_handler, 
    process_registration
)
from src.utils.db import add_user
from src.keyboards.user import get_main_keyboard

@pytest.mark.asyncio
async def test_start_handler_new_user(message_mock, bot, state_mock):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üëã"""
    message_mock.bot = bot
    
    with patch('src.handlers.user.get_user', return_value=None):
        await start_handler(message_mock, state_mock)
        state_mock.set_state.assert_called_once_with("registration")  # –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ FSMFillForm
        message_mock.answer.assert_called_with(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )

@pytest.mark.asyncio
async def test_registration_success(message_mock, state_mock):
    message_mock.text = "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á"  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    message_mock.from_user.id = 123
    
    # –ú–µ–Ω—è–µ–º –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π assert –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∫ –∑–∞–º–∫—É üîë
    with patch('src.handlers.user.add_user', new=AsyncMock()) as mock_add:
        await process_registration(message_mock, state_mock)
        mock_add.assert_awaited_once_with(123, "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º assert_awaited
        state_mock.clear.assert_called_once()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        message_mock.answer.assert_called_with(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—Å–∞:"
        )