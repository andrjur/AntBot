import pytest
from unittest.mock import patch, mock_open
from src.utils.lessons import get_lesson_materials

from unittest.mock import AsyncMock, patch, mock_open, MagicMock
import aiofiles
import os
from src.utils.lessons import get_lesson_materials

class AsyncContextManagerMock:
    async def __aenter__(self):
        return self  # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç
    async def __aexit__(self, *args):
        pass
    async def read(self):  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —á—Ç–µ–Ω–∏—è
        return "–¢–µ–∫—Å—Ç —É—Ä–æ–∫–∞"

@pytest.mark.asyncio
async def test_get_lesson_materials():
    with patch('os.listdir') as mock_listdir, \
         patch('os.path.isdir', return_value=False), \
         patch('os.path.splitext') as mock_splitext, \
         patch('aiofiles.open', return_value=AsyncContextManagerMock()):
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        mock_listdir.return_value = [
            '01_theory.txt',
            '02_task.jpg',
            '03_example.mp4'
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º splitext –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        def side_effect_splitext(filename):
            if '01_theory.txt' in filename:
                return ['01_theory', '.txt']
            elif '02_task.jpg' in filename:
                return ['02_task', '.jpg']
            elif '03_example.mp4' in filename:
                return ['03_example', '.mp4']
            return ['', '']
        
        mock_splitext.side_effect = side_effect_splitext
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        materials = await get_lesson_materials('test_course', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert len(materials) == 3
        assert materials[0]['type'] == 'text'
        assert materials[0]['content'] == '–¢–µ–∫—Å—Ç —É—Ä–æ–∫–∞'
        assert materials[1]['type'] == 'photo'
        assert materials[2]['type'] == 'video'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        assert '01_theory' in materials[0]['file_path']
        assert '02_task' in materials[1]['file_path']
        assert '03_example' in materials[2]['file_path']

@pytest.mark.asyncio
async def test_get_lesson_materials_empty():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Ä–æ–∫–∞ üìÇ"""
    with patch('os.listdir', return_value=[]):
        materials = await get_lesson_materials('test_course', 1)
        assert materials == []

@pytest.mark.asyncio
async def test_get_lesson_materials_error():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ üö´"""
    with patch('os.listdir', side_effect=FileNotFoundError):
        materials = await get_lesson_materials('test_course', 1)
        assert materials == []