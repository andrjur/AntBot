import os
import pytest
import pytest_asyncio
import asyncio
from unittest.mock import AsyncMock
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from src.utils.db import init_db, DB_PATH


@pytest_asyncio.fixture(scope="function")
def event_loop():
    """–°–æ–∑–¥–∞—ë–º –ª—É–ø –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–∏ –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏ ‚ú®)"""
    policy = asyncio.get_event_loop_policy()
    loop = policy.new_event_loop()
    asyncio.set_event_loop(loop)
    yield loop
    loop.close()

@pytest_asyncio.fixture(scope="function", autouse=True)
async def setup_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∏—Å—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ üóÉÔ∏è"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if os.path.exists(DB_PATH):
        os.remove(DB_PATH)
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —á–∏—Å—Ç—É—é –ë–î
    await init_db()
    yield
    
    # –ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    if os.path.exists(DB_PATH):
        os.remove(DB_PATH)

@pytest_asyncio.fixture
async def storage():
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (—á—Ç–æ–±—ã –±–æ—Ç—É –±—ã–ª–æ –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ ü§î)"""
    return MemoryStorage()

@pytest_asyncio.fixture
async def bot():
    """–°–æ–∑–¥–∞—ë–º –º–æ–∫-–±–æ—Ç–∞ (–ø–æ—á—Ç–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π, —Ç–æ–ª—å–∫–æ –Ω–µ –∫—É—Å–∞–µ—Ç—Å—è ü§ñ)"""
    bot = AsyncMock(Bot)
    bot.send_message = AsyncMock()
    bot.send_photo = AsyncMock()
    bot.send_video = AsyncMock()
    return bot

@pytest_asyncio.fixture
async def dp(storage):
    """–î–∏—Å–ø–µ—Ç—á–µ—Ä (–≥–ª–∞–≤–Ω—ã–π –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π üìÆ)"""
    dp = Dispatcher(storage=storage)
    return dp

def pytest_configure(config):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pytest-asyncio (—á—Ç–æ–±—ã –Ω–µ —Ä—É–≥–∞–ª—Å—è ü§´)"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    config.addinivalue_line(
        "markers",
        "asyncio: mark test as async test"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º asyncio
    config.option.asyncio_mode = "strict"


import pytest
from unittest.mock import AsyncMock


@pytest.fixture
def message_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç! üì®)"""
    message = AsyncMock()
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º from_user
    message.from_user = AsyncMock()
    message.from_user.id = 123
    message.from_user.first_name = "–¢–µ—Å—Ç"
    
    # –í–∞–∂–Ω–æ! –î–µ–ª–∞–µ–º return_value –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    message.answer.return_value = None  # –∏–ª–∏ —á—Ç–æ —Ç–∞–º –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
    message.reply.return_value = None
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    message.bot = AsyncMock()
    message.bot.send_message.return_value = None
    
    return message

@pytest.fixture
def mock_user_info():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è get_user_info (–ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —É –Ω–∞—Å –∫–∞–ø—Ä–∏–∑–Ω—ã–π üëª)"""
    mock = AsyncMock()
    mock.return_value = {
        'name': '–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
        'course_id': 'python101',
        'status': 'active'
    }
    return mock

@pytest.fixture
def callback_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è callback (—Å –Ω–∞—á–∏–Ω–∫–æ–π! üéØ)"""
    callback = AsyncMock()
    callback.from_user = AsyncMock()
    callback.from_user.id = 999
    callback.message = AsyncMock()
    callback.message.from_user = AsyncMock()
    callback.message.from_user.id = 123
    callback.answer = AsyncMock()
    callback.data = "test_callback_data"
    callback.bot = AsyncMock()
    return callback

@pytest.fixture
def state_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) üîÑ"""
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={})
    state.set_data = AsyncMock()
    state.finish = AsyncMock()
    return state
    