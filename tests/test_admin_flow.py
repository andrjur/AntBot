import pytest
from unittest.mock import AsyncMock, patch, ANY
from aiogram.types import CallbackQuery
from src.handlers.admin import approve_homework, reject_homework
from src.keyboards.user import get_main_keyboard

@pytest.mark.asyncio
async def test_approve_homework(callback_mock, bot):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏ –∞–¥–º–∏–Ω–æ–º üìù"""
    callback_mock.data = "hw_approve_12345_python101_1"
    callback_mock.bot = bot
    
    # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with patch('os.path.exists', return_value=True), \
         patch('os.path.dirname', return_value='/test/path'), \
         patch('glob.glob', return_value=['test_file.txt']), \
         patch('src.handlers.admin.safe_db_operation') as mock_db, \
         patch('src.handlers.admin.get_next_lesson', return_value=2), \
         patch('src.handlers.admin.get_main_keyboard', return_value=get_main_keyboard()):
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –ë–î
        db_mock = AsyncMock()
        db_mock.fetchone.return_value = ('2024-03-15 15:00:00',)
        mock_db.return_value = db_mock
        
        await approve_homework(callback_mock, bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É
        bot.send_message.assert_called_with(
            12345,
            "‚úÖ –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.",
            reply_markup=ANY
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
        assert mock_db.call_count > 0

@pytest.mark.asyncio
async def test_reject_homework(callback_mock, bot):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏ üö´"""
    callback_mock.data = "hw_reject_12345_python101_1"
    callback_mock.bot = bot
    
    with patch('src.handlers.admin.safe_db_operation') as mock_db, \
         patch('src.handlers.admin.process_homework_status', return_value=True):
        
        mock_db.return_value.fetchone.return_value = (1,)  # current_lesson
        await reject_homework(callback_mock, bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        bot.send_message.assert_called_with(
            12345,
            "‚ùå –í–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ."
        )