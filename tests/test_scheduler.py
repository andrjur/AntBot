import pytest
from datetime import datetime, timedelta
from src.utils.scheduler import format_next_lesson_time, parse_next_lesson_time
from src.services.scheduler import schedule_lessons
from src.config import extract_delay_from_filename, TEST_MODE, TEST_FILE_DELAY
from unittest.mock import AsyncMock, patch, MagicMock

@pytest.mark.asyncio
async def test_format_next_lesson_time():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ ‚è∞"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    assert format_next_lesson_time("1d") == "24 —á–∞—Å–∞"
    assert format_next_lesson_time("2d") == "48 —á–∞—Å–æ–≤"
    assert format_next_lesson_time("7d") == "–Ω–µ–¥–µ–ª—é"
    assert format_next_lesson_time("14d") == "2 –Ω–µ–¥–µ–ª–∏"

@pytest.mark.asyncio
async def test_extract_delay_from_filename():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ ‚è∞"""
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    with patch('src.config.TEST_MODE', False):
        assert extract_delay_from_filename("task_15min.txt") == 15 * 60  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        assert extract_delay_from_filename("theory_1hour.txt") == 1 * 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        assert extract_delay_from_filename("intro.txt") == 0  # –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
        assert extract_delay_from_filename("practice_2hour.txt") == 2 * 3600  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

@pytest.mark.asyncio
async def test_parse_next_lesson_time():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ üìÖ"""
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    assert parse_next_lesson_time("1d") == now + timedelta(days=1)
    assert parse_next_lesson_time("2d") == now + timedelta(days=2)
    assert parse_next_lesson_time("1w") == now + timedelta(weeks=1)

@pytest.mark.asyncio
async def test_schedule_lessons():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ‚è∞"""
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è send_lesson
    mock_send_lesson = AsyncMock()
    
    # –ü–∞—Ç—á–∏–º aiosqlite –∏ –¥–æ–±–∞–≤–ª—è–µ–º send_lesson –≤ –º–æ–¥—É–ª—å scheduler
    with patch('src.services.scheduler.aiosqlite.connect') as mock_connect, \
         patch('src.services.scheduler.send_lesson', mock_send_lesson):
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        mock_db = AsyncMock()
        mock_cursor = AsyncMock()
        mock_connect.return_value.__aenter__.return_value = mock_db
        mock_db.execute.return_value = mock_cursor
        mock_cursor.fetchall.return_value = [(123, 'python101', 1)]
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await schedule_lessons()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_lesson –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_send_lesson.assert_called_once_with(123, 'python101', 1)